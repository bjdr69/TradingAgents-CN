[1mdiff --git a/web/components/sidebar.py b/web/components/sidebar.py[m
[1mindex d37afcf..e1ea012 100644[m
[1m--- a/web/components/sidebar.py[m
[1m+++ b/web/components/sidebar.py[m
[36m@@ -590,30 +590,56 @@[m [mdef render_sidebar():[m
 [m
             # 设置默认值，确保健壮性[m
             default_memory_provider = st.session_state.get('memory_provider')[m
[31m-            # 如果保存的值无效或不存在，则安全地回退到列表的第一个选项[m
[32m+[m[32m            # 如果保存的值无效或不存在，则设置为dashscope作为默认值[m
             if not default_memory_provider or default_memory_provider not in provider_options:[m
[31m-                default_memory_provider = provider_options[0] if provider_options else None[m
[31m-[m
[31m-            if default_memory_provider:[m
[31m-                memory_provider = st.selectbox([m
[31m-                    "矢量模型提供商",[m
[31m-                    options=provider_options, # 复用主模型的选项[m
[31m-                    index=provider_options.index(default_memory_provider),[m
[31m-                    format_func=lambda x: provider_display.get(x, x), # 复用主模型的显示格式[m
[31m-                    help="为矢量模型选择一个提供商"[m
[31m-                )[m
[31m-            else:[m
[31m-                st.warning("⚠️ models.json中未配置任何模型提供商。")[m
[31m-                memory_provider = None[m
[32m+[m[32m                default_memory_provider = 'dashscope' if 'dashscope' in provider_options else (provider_options[0] if provider_options else None)[m
[32m+[m
[32m+[m[32m            memory_provider = st.selectbox([m
[32m+[m[32m                "矢量模型提供商",[m
[32m+[m[32m                options=provider_options, # 复用主模型的选项[m
[32m+[m[32m                index=provider_options.index(default_memory_provider) if default_memory_provider in provider_options else 0,[m
[32m+[m[32m                format_func=lambda x: provider_display.get(x, x), # 复用主模型的显示格式[m
[32m+[m[32m                help="为矢量模型选择一个提供商（可与主模型不同）"[m
[32m+[m[32m            )[m
[32m+[m[41m            [m
[32m+[m[32m            # 检查记忆模型提供商是否变更[m
[32m+[m[32m            previous_memory_provider = st.session_state.get('memory_provider')[m
[32m+[m[32m            if previous_memory_provider != memory_provider:[m
[32m+[m[32m                logger.info(f"🔄 [Memory] 记忆模型提供商变更: {previous_memory_provider} → {memory_provider}")[m
[32m+[m[32m                # 提供商变更时，尝试恢复之前保存的模型名称[m
[32m+[m[32m                memory_models_by_provider = st.session_state.get('memory_models_by_provider', {})[m
[32m+[m[32m                if memory_provider in memory_models_by_provider:[m
[32m+[m[32m                    st.session_state.memory_model = memory_models_by_provider[memory_provider][m
[32m+[m[32m                    logger.debug(f"🔄 [Memory] 恢复{memory_provider}的记忆模型: {st.session_state.memory_model}")[m
[32m+[m[32m                else:[m
[32m+[m[32m                    # 如果没有保存过，则清空让用户输入[m
[32m+[m[32m                    st.session_state.memory_model = ""[m
[32m+[m[41m            [m
             st.session_state.memory_provider = memory_provider[m
 [m
[31m-            # 矢量模型名称[m
[31m-            default_memory_model = st.session_state.get('memory_model', "text-embedding-v3")[m
[32m+[m[32m            # 矢量模型名称 - 根据提供商提供默认值或恢复之前保存的值[m
[32m+[m[32m            default_memory_model = st.session_state.get('memory_model')[m
[32m+[m[41m            [m
[32m+[m[32m            # 定义embedding默认值字典（移到更广的作用域）[m
[32m+[m[32m            embedding_defaults = {[m
[32m+[m[32m                "dashscope": "text-embedding-v1",[m
[32m+[m[32m                "deepseek": "text-embedding-v1",[m[41m [m
[32m+[m[32m                "openai": "text-embedding-3-small",[m
[32m+[m[32m                "google": "text-embedding-004",[m
[32m+[m[32m                "openrouter": "text-embedding-3-small",[m
[32m+[m[32m                "硅基流动": "text-embedding-v1"[m
[32m+[m[32m            }[m
[32m+[m[41m            [m
[32m+[m[32m            if not default_memory_model:[m
[32m+[m[32m                # 根据提供商设置默认embedding模型[m
[32m+[m[32m                default_memory_model = embedding_defaults.get(memory_provider, "text-embedding-3-small")[m
[32m+[m[32m                logger.debug(f"🔧 [Memory] 为{memory_provider}设置默认embedding模型: {default_memory_model}")[m
[32m+[m[41m            [m
             memory_model = st.text_input([m
                 "矢量模型名称",[m
                 value=default_memory_model,[m
[31m-                placeholder="例如: text-embedding-v3",[m
[31m-                help="输入矢量模型的具体名称"[m
[32m+[m[32m                placeholder=f"例如: {embedding_defaults.get(memory_provider, 'text-embedding-3-small')}",[m
[32m+[m[32m                help=f"输入{memory_provider}的矢量模型名称"[m
             )[m
             st.session_state.memory_model = memory_model[m
 [m
